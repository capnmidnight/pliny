{"version":3,"file":"pliny.js","sources":["src/client/index.js"],"sourcesContent":["// BEGIN PLINY\r\n\r\n// Walks through dot-accessors to retrieve an object out of a root object.\r\n//\r\n// @param {Object} bag - the root object.\r\n// @param {String} name - a period-delimited list of object accessors, naming the object we want to access.\r\n// @returns {Object} - the object we asked for, or undefined, if it doesn't exist.\r\nfunction openBag(bag, name) {\r\n  // Break up the object path, then recurse through objects until we either run\r\n  // out of objects or find the one we're looking for.\r\n  return name\r\n    .split(\".\")\r\n    .reduce((obj, p) => obj[p], bag);\r\n}\r\n\r\n\r\nfunction hash(buf) {\r\n  let s1 = 1, s2 = 0;\r\n  buf.split(\"\")\r\n    .forEach((c) => {\r\n      s1 = (s1 + c.charCodeAt(0)) % 32771;\r\n      s2 = (s2 + s1) % 32771;\r\n    });\r\n\r\n  return s2 << 8 | s1;\r\n}\r\n\r\n/////\r\n// Fills in intermediate levels of an object tree to make the full object tree\r\n// accessible, in the documentation database.\r\n//\r\n// @param {String} name - a period-delimited list of object accessors, naming the object we want to fill in.\r\n// @param {Object} rootObject - the object on which to fill in values.\r\n// @returns {Object} - the leaf-level filled-in object.\r\n///\r\nfunction fillBag(name) {\r\n  // Start at the top level.\r\n  var bag = database;\r\n  if (typeof name !== \"undefined\" && name.length > 0) {\r\n    // Break up the object path.\r\n    var parts = name.split(\".\"),\r\n\r\n      // We'll be rebuilding the path as we go, so we can name intermediate objects.\r\n      path = \"\",\r\n\r\n      // The first time we extend the path, it doesn't get a period seperator.\r\n      sep = \"\";\r\n    // Walk through the object tree.\r\n    for (var i = 0; i < parts.length; ++i) {\r\n      // Fill in any missing objects.\r\n      if (typeof bag[parts[i]] === \"undefined\") {\r\n        bag[parts[i]] = {};\r\n      }\r\n\r\n      path += sep + parts[i];\r\n      sep = \".\";\r\n\r\n      // Drill down into the tree.\r\n      bag = bag[parts[i]];\r\n\r\n      // If we have a name, and the object hasn't already been named, then we\r\n      // give it a name.\r\n      if (path.length > 0 && !bag.name) {\r\n        bag.name = path;\r\n      }\r\n    }\r\n  }\r\n  return bag;\r\n}\r\n\r\n/////\r\n// Reads the documentation metadata and builds up the documentation database.\r\n//\r\n// @param {String} fieldType - the name of the type of object for which we're reading metadata: function, class, namespace, etc.\r\n// @param {String} info - the metadata object the user provided us.\r\n///\r\nfunction analyzeObject(fieldType, info) {\r\n  var i;\r\n  // If the user didn't supply a type for the metadata object, we infer it\r\n  // from context.\r\n  if (typeof info.fieldType === 'undefined') {\r\n    info.fieldType = fieldType;\r\n  }\r\n\r\n  // Find out where we're going to store the object in the metadata database and where in the parent object we're going to store the documentation object.\r\n  var parentBag = fillBag(info.parent || \"\"),\r\n  pluralName = fieldType + \"s\";\r\n  pluralName = pluralName.replace(/ys$/, \"ies\")\r\n  .replace(/ss$/, \"ses\");\r\n  if (!parentBag[pluralName]) {\r\n    parentBag[pluralName] = [];\r\n  }\r\n  var arr = parentBag[pluralName];\r\n\r\n  // Make sure we haven't already stored an object by this name.\r\n  var found = false;\r\n  for (i = 0; i < arr.length; ++i) {\r\n    if (arr[i].name === info.name) {\r\n      found = true;\r\n    }\r\n  }\r\n\r\n  if (!found) {\r\n    var subArrays = {};\r\n\r\n    [\"examples\", \"issues\", \"comments\"].forEach(function (k) {\r\n      if (typeof info[k] !== \"undefined\") {\r\n        subArrays[k] = info[k];\r\n        delete info[k];\r\n      }\r\n    });\r\n\r\n    // After we copy the metadata, we get back the documentation database object\r\n    // that will store the fuller data we get from other objects.\r\n    info = copyObjectMetadata(info);\r\n\r\n    arr.push(info);\r\n\r\n    // Handle other parent-child relationships.\r\n    if (info.fieldType === \"class\" && info.baseClass) {\r\n      if (info.parent === undefined) {\r\n        info.parent = info.baseClass;\r\n      }\r\n      pliny[\"subClass\"](info);\r\n    }\r\n\r\n    for (var k in subArrays) {\r\n      var subArr = subArrays[k],\r\n      type = k.substring(0, k.length - 1);\r\n      for (i = 0; i < subArr.length; ++i) {\r\n        if (subArr[i].parent === undefined) {\r\n          subArr[i].parent = info.fullName.replace(/::/g, \".\");\r\n        }\r\n        pliny[type](subArr[i]);\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n/////\r\n// Copies all of the data the user entered for metadata to the documetation\r\n// object in the documentation database.\r\n//\r\n// @param {String} name - a period-delimited list of object accessors, naming the documentation object we want to create.\r\n// @param {Object} info - the metadata object from the user.\r\n// @returns the documentation object that we created.\r\n///\r\nfunction copyObjectMetadata(info) {\r\n  var fullName = (info.parent && info.parent + \".\" || \"\") + info.name,\r\n  bag = fillBag(fullName);\r\n\r\n  // Make sure we aren't setting the data for a second time.\r\n  if (!bag.fieldType) {\r\n\r\n    // Copy all the fields! ALL THE FIELDS!\r\n    // TODO: don't copy metadata directly to bag object. The bag objects are used\r\n    // as the search path for finding code objects, and some of the metadata field\r\n    // names might clash with code object field names. Maybe have a new metadata\r\n    // table.\r\n    for (var k in info) {\r\n      bag[k] = info[k];\r\n    }\r\n\r\n    // The fullName is used in titles on documentation articles.\r\n    if (!bag.fullName) {\r\n      if (bag.fieldType === \"issue\") {\r\n        Object.defineProperty(bag, \"issueID\", {\r\n          get: function get() {\r\n            return hash(this.parent + \".\" + this.name);\r\n          }\r\n        });\r\n      }\r\n      Object.defineProperty(bag, \"fullName\", {\r\n        get: function get() {\r\n          var output = \"\";\r\n          if (this.parent) {\r\n            output += this.parent;\r\n\r\n            // Print the seperator between the parent identifier and the name of\r\n            // the object.\r\n            if (this.fieldType === \"method\" || this.fieldType === \"property\" || this.fieldType === \"event\") {\r\n              // Methods, properties, and events aren't invokable from their class\r\n              // objects, so print them in a different way that doesn't suggest you\r\n              // can dot-access them. I'm using the typical C++ notation for member\r\n              // fields here.\r\n              output += \"::\";\r\n            }\r\n            else if (this.fieldType === \"example\" || this.fieldType === \"issue\") {\r\n              output += \": \";\r\n            }\r\n            else {\r\n              output += \".\";\r\n            }\r\n          }\r\n          output += this.name;\r\n          return output;\r\n        }\r\n      });\r\n    }\r\n\r\n    // The ID is used to make DOM elements.\r\n    if (!bag.id) {\r\n      Object.defineProperty(bag, \"id\", {\r\n        get: function get() {\r\n          return this.fullName.replace(/(\\.|:)/g, \"_\")\r\n          .replace(/ /g, \"\");\r\n        }\r\n      });\r\n    }\r\n\r\n    // We try to see if the real object exists yet (whether the documentation\r\n    // before or after the object it is documenting). If it doesn't, then we\r\n    // wait a small amount of time for the rest of the script to execute and\r\n    // then pick up where we left off.\r\n    if (!setContextualHelp(fullName)) {\r\n      // The setTimeout is to allow the script to continue to load after this\r\n      // particular function has called, so that more of the script can be\r\n      // inspected.\r\n      setTimeout(setContextualHelp, 1, fullName);\r\n    }\r\n  }\r\n  return bag;\r\n}\r\n\r\nfunction setEnumerationValues(name) {\r\n  var enumeration = null;\r\n  try {\r\n    enumeration = require(name);\r\n  }\r\n  catch (exp) {\r\n    enumeration = null;\r\n  }\r\n  if (!enumeration) {\r\n    setTimeout(setEnumerationValues, 1, name);\r\n  }\r\n  else {\r\n    for (var key in enumeration) {\r\n      var val = enumeration[key];\r\n      if (enumeration.hasOwnProperty(key) && typeof val === \"number\") {\r\n        pliny[\"value\"]({\r\n          parent: name,\r\n          name: key,\r\n          type: \"Number\",\r\n          description: val.toString(),\r\n          value: val\r\n        });\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nconst scriptPattern = /\\bpliny\\s*\\.\\s*(\\w+)/gm;\r\n/////\r\n// Finds the actual object in the scope hierarchy, and looks for contextual scripts that might be defined in this object\r\n//\r\n// @param {String} name - a period-delimited list of object accessors, naming the real object we want to access.\r\n// @returns {Object} - the actual object the name refers to, or undefined if such an object exists.\r\n///\r\nfunction setContextualHelp(name) {\r\n  // Find the real object\r\n  var obj = openBag(database, name);\r\n  if (obj) {\r\n    if (obj.fieldType === \"enumeration\") {\r\n      setEnumerationValues(obj.parent + \".\" + obj.name);\r\n    }\r\n    // Look for contextual scripts\r\n    if (typeof obj === \"function\") {\r\n      var script = obj.toString(),\r\n      match = null;\r\n      while (!!(match = scriptPattern.exec(script))) {\r\n        var fieldType = match[1],\r\n        start = match.index + match[0].length,\r\n        fieldInfo = getFieldInfo(script.substring(start));\r\n        // Shove in the context.\r\n        if (fieldInfo.parent === undefined) {\r\n          fieldInfo.parent = name;\r\n        }\r\n\r\n        // And follow the normal documentation path.\r\n        pliny[fieldType].call(null, fieldInfo);\r\n      }\r\n    }\r\n  }\r\n  return obj;\r\n}\r\n\r\n/////\r\n// When a documentation script is included inside of a function, we need to\r\n// read the script and parse out the JSON objects so we can later execute\r\n// the documentation function safely, i.e. not use eval().\r\n//\r\n// @param {String} script - the source code of the containing function.\r\n// @return {Array} - a list of JSON-parsed objects that are the parameters specified at the documentation function call-site (i.e. sans context)\r\n///\r\nfunction getFieldInfo(script) {\r\n  var parameters = [],\r\n  start = 0,\r\n  scopeLevel = 0,\r\n  inString = false,\r\n  stringToken = null;\r\n\r\n  // Walk over the script...\r\n  for (var i = 0; i < script.length; ++i) {\r\n    // ... a character at a time\r\n    var c = script.charAt(i);\r\n\r\n    // Keep track of whether or not we're in a string. We're looking for any\r\n    // quotation marks that are either at the beginning of the string or have\r\n    // not previously been escaped by a backslash...\r\n    if ((inString && c === stringToken || !inString && (c === '\"' || c === \"'\")) && (i === 0 || script.charAt(i - 1) !== '\\\\')) {\r\n      inString = !inString;\r\n      if (inString) {\r\n        stringToken = c;\r\n      }\r\n    }\r\n\r\n    // ... because only then...\r\n    if (!inString) {\r\n      // ... can we change scope level. We're only supporting JSON objects,\r\n      // so no need to go any further than this.\r\n      if (c === '(' || c === '{' || c === '[') {\r\n        ++scopeLevel;\r\n      }\r\n      else if (c === ')' || c === '}' || c === ']') {\r\n        --scopeLevel;\r\n      }\r\n    }\r\n\r\n    // If we've exited the parameter list, or we're inside the parameter list\r\n    // and see a comma that is not inside of a string literal...\r\n    if (scopeLevel === 0 || scopeLevel === 1 && c === ',' && !inString) {\r\n      // ... save the parameter, skipping the first character because it's always\r\n      // either the open paren for the parameter list or one of the commas\r\n      // between parameters.\r\n      parameters.push(parseParameter(script.substring(start + 1, i)\r\n        .trim()));\r\n\r\n      // Advance forward the start of the next token.\r\n      start = i;\r\n\r\n      // If we left the parameter list, we've found all of the parameters and\r\n      // can quit out of the loop before we get to the end of the script.\r\n      if (scopeLevel === 0) {\r\n        break;\r\n      }\r\n    }\r\n  }\r\n  if (parameters.length !== 1) {\r\n    throw new Error(\"There should have only been one parameter to the function\");\r\n  }\r\n  return parameters[0];\r\n}\r\n\r\n/////\r\n// When we've found an individual parameter to a documentation function in a\r\n// contextual scope, we need to make sure it's valid JSON before we try to\r\n// convert it to a real JavaScript object.\r\n//\r\n// @param {String} script - the subscript portion that refers to a single parameter.\r\n// @return {Object} - the value that the string represents, parsed with JSON.parse().\r\n///\r\nfunction parseParameter(script) {\r\n  // Make sure all hash key labels are surrounded in quotation marks.\r\n  const stringLiterals = [],\r\n    litReplace = (str) => {\r\n      var name = \"&STRING_LIT\" + stringLiterals.length + \";\";\r\n      if (str[0] === \"'\") {\r\n        str = str.replace(/\\\\\"/g, \"&_DBLQUOTE_;\")\r\n        .replace(/\\\\'/g, \"&_SGLQUOTE_;\")\r\n        .replace(/\"/g, \"\\\\\\\"\")\r\n        .replace(/'/g, \"\\\"\")\r\n        .replace(/&_DBLQUOTE_;/g, \"\\\\\\\"\")\r\n        .replace(/&_SGLQUOTE_;/g, \"\\\\'\");\r\n      }\r\n      stringLiterals.push(str);\r\n      return name;\r\n    },\r\n    litReturn = (a, b) => stringLiterals[b],\r\n      param = script.replace(/'(\\\\'|[^'])+'/g, litReplace)\r\n        .replace(/\"(\\\\\"|[^\"])+\"/g, litReplace)\r\n        .replace(/\\b(\\w+)\\b\\s*:/g, \"\\\"$1\\\":\")\r\n        .replace(/&STRING_LIT(\\d+);/g, litReturn)\r\n        .replace(/&STRING_LIT(\\d+);/g, litReturn)\r\n        .replace(/\\\\\\r?\\n/g, \"\");\r\n  return JSON.parse(param);\r\n}\r\n\r\n  // The default storage location.\r\nconst database = {\r\n  fieldType: \"database\",\r\n  fullName: \"[Global]\",\r\n  id: \"Global\",\r\n  description: \"These are the elements in the global namespace.\"\r\n};\r\n\r\n// Create documentation functions for each of the supported types of code objects.\r\nconst recorders = [\r\n  \"namespace\",\r\n  \"event\",\r\n  \"function\",\r\n  \"value\",\r\n  \"class\",\r\n  \"property\",\r\n  \"method\",\r\n  \"enumeration\",\r\n  \"record\",\r\n  \"subClass\",\r\n  \"example\",\r\n  \"error\",\r\n  \"issue\",\r\n  \"comment\"\r\n].reduce(function (obj, k) {\r\n  obj[k] = analyzeObject.bind(null, k);\r\n  return obj;\r\n}, {});\r\n\r\nconst pliny = Object.assign({\r\n\r\n}, recorders, {\r\n  database,\r\n  get(id) {\r\n    return openBag(database, id);\r\n  }\r\n})\r\n\r\nexport default pliny;\r\n\r\n// END PLINY\r\n"],"names":[],"mappings":"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"}